///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : camera.cpp
/// SOFTWARE COMPONENT NAME           : Camera
/// GENERATED DATE                    : 2024-11-07 14:01:17
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <vector>
#include <memory>
#include <chrono>
#include <thread>
#include <mutex>
#include <opencv2/opencv.hpp>

#include "camera/aa/camera.h"

namespace camera
{
namespace aa
{
 
Camera::Camera()
    : m_logger(ara::log::CreateLogger("CAM", "SWC", ara::log::LogLevel::kVerbose))
    , m_workers(2)
{
}
 
Camera::~Camera()
{
}
 
bool Camera::Initialize() {
    m_logger.LogVerbose() << "Camera::Initialize";
    m_CameraData = std::make_shared<camera::aa::port::CameraData>();

    // 카메라 인덱스 리스트 전달
    std::vector<int> cameraIdxList = {0, 1};
    return m_CameraData->scanCameraIndex(cameraIdxList);
}
 
void Camera::Start()
{
    m_logger.LogVerbose() << "Camera::Start";
    
    m_CameraData->Start();
    
    // run software component
    Run();
}
 
void Camera::Terminate()
{
    m_logger.LogVerbose() << "Camera::Terminate";
    
    m_CameraData->Terminate();
}
 
void Camera::Run()
{
    m_logger.LogVerbose() << "Camera::Run";
    
    // CEvent로 보내줄 데이터 넣기
    m_workers.Async([this] { TaskGenerateREventValue();});
    m_workers.Async([this] { m_CameraData->SendEventCEventCyclic(); });

    // 위의 Async로 등록된 함수들이 모두 리턴될 때까지 기다린다.
    m_workers.Wait();
}

void Camera::TaskGenerateREventValue()
{
    while (m_running) 
    {
        m_CameraData->produceFrames();
        std::this_thread::sleep_for(std::chrono::seconds(1));  // 1초 대기 후 다음 프레임 캡처
    }
}
 
} /// namespace aa
} /// namespace camera
